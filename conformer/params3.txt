# Define a simple Conformer model
class ConformerTiny(nn.Module):
    def __init__(self, img_size=128, num_classes=5, embed_dim=128, num_heads=4, num_transformer_layers=2):
        super(ConformerTiny, self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(3, embed_dim, kernel_size=3, stride=2, padding=1),
            nn.BatchNorm2d(embed_dim),
            nn.ReLU(),
            nn.Conv2d(embed_dim, embed_dim, kernel_size=3, stride=2, padding=1),
            nn.BatchNorm2d(embed_dim),
            nn.ReLU(),
            nn.Conv2d(embed_dim, embed_dim, kernel_size=3, stride=2, padding=1),
            nn.BatchNorm2d(embed_dim),
            nn.ReLU()
        )
        self.transformer = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=embed_dim, nhead=num_heads),
            num_layers=num_transformer_layers
        )
        self.fc = nn.Linear(embed_dim, num_classes)

    def forward(self, x):
        # Apply convolutional layers
        x = self.conv(x)
        b, c, h, w = x.shape
        x = x.view(b, c, -1).permute(2, 0, 1)  # Reshape for Transformer (seq_len, batch, channels)

        # Apply transformer
        x = self.transformer(x)

        # Classification head
        x = x.mean(dim=0)  # Global average pooling
        x = self.fc(x)
        return x